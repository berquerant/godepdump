// Code generated by "goconfig -field Limit int -option -output type_config_generated.go -prefix TypeAnalyze"; DO NOT EDIT.

package display

type TypeAnalyzeConfigItem[T any] struct {
	modified     bool
	value        T
	defaultValue T
}

func (s *TypeAnalyzeConfigItem[T]) Set(value T) {
	s.modified = true
	s.value = value
}
func (s *TypeAnalyzeConfigItem[T]) Get() T {
	if s.modified {
		return s.value
	}
	return s.defaultValue
}
func (s *TypeAnalyzeConfigItem[T]) Default() T {
	return s.defaultValue
}
func (s *TypeAnalyzeConfigItem[T]) IsModified() bool {
	return s.modified
}
func NewTypeAnalyzeConfigItem[T any](defaultValue T) *TypeAnalyzeConfigItem[T] {
	return &TypeAnalyzeConfigItem[T]{
		defaultValue: defaultValue,
	}
}

type TypeAnalyzeConfig struct {
	Limit *TypeAnalyzeConfigItem[int]
}
type TypeAnalyzeConfigBuilder struct {
	limit int
}

func (s *TypeAnalyzeConfigBuilder) Limit(v int) *TypeAnalyzeConfigBuilder {
	s.limit = v
	return s
}
func (s *TypeAnalyzeConfigBuilder) Build() *TypeAnalyzeConfig {
	return &TypeAnalyzeConfig{
		Limit: NewTypeAnalyzeConfigItem(s.limit),
	}
}

func NewTypeAnalyzeConfigBuilder() *TypeAnalyzeConfigBuilder { return &TypeAnalyzeConfigBuilder{} }
func (s *TypeAnalyzeConfig) Apply(opt ...TypeAnalyzeConfigOption) {
	for _, x := range opt {
		x(s)
	}
}

type TypeAnalyzeConfigOption func(*TypeAnalyzeConfig)

func WithLimit(v int) TypeAnalyzeConfigOption {
	return func(c *TypeAnalyzeConfig) {
		c.Limit.Set(v)
	}
}
